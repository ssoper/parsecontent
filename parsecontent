#!/usr/bin/env node

// possibly use grid from metro and get rid of skeleton
// navigation
// figure out spring break folder
// add basic text analysis

var _ = require('lodash'),
    fs = require('fs'),
    path = require('path'),
    glob = require('glob'),
    moment = require('moment'),
    jade = require('jade'),
    marked = require('marked'),
    async = require('async'),
    compressor = require('node-minify');

function Entry(path) {
    this.path = path;
    this.filename = _.last(this.path.split('/'));
    this.second = !!(/second\.md$/.exec(this.filename));
    var match = /^\d{1,2}-\d{1,2}-\d{4}/.exec(this.filename);
    if (match) {
        this.date = moment(new Date(match[0]));
    }
}

var indexTemplate = jade.compileFile(path.resolve(__dirname, 'templates/index.jade'));
var entryTemplate = jade.compileFile(path.resolve(__dirname, 'templates/entry.jade'));
var htmlDir = 'html';
if (!fs.existsSync(htmlDir)) {
    fs.mkdir(htmlDir)
}

function findFiles(cb) {
    glob("**/*.md", cb);
}

function createEntries(files, cb) {
    console.log('Processing ' + files.length + ' files');

    var entries = [];
    _.each(files, function(file) {
        var entry = new Entry(file);
        if (!entry || !entry.date) {
            return;
        }

        entries.push(entry);
    });

    cb(null, entries);
}

function sortEntries(entries, cb) {
    entries.sort(function(a, b) {
        if (a.date.valueOf() < b.date.valueOf()) {
            return -1;
        }

        if (b.date.valueOf() < a.date.valueOf()) {
            return 1;
        }

        if (a.second) {
            return 1;
        }

        return -1;
    });

    cb(null, entries);
}

function createJson(entries, cb) {
    var json = [];
    var dateIndex = {};

    _.each(entries, function(entry, idx) {
        var raw = fs.readFileSync(entry.path, { encoding: 'utf8' });
        if (!raw || raw.length === 0)
            return;

        var content = marked(raw);
        var title = entry.date.format('MMMM Do, YYYY');
        var date = entry.date.format('YYYY-MM-DD');
        var options = { content: content, date: date, title: title };
        var html = entryTemplate(options);
        
        if (!dateIndex[date]) {
            dateIndex[date] = [];
        }

        dateIndex[date].push(idx);

        json.push({ html: html, date: date });
    });

    cb(null, json, dateIndex);
}

function minifyMetro(json, dateIndex, cb) {
    var minPath = '/tmp/metro.min.js';
    var files = [
        path.resolve(__dirname, 'js/metro.js'),
        path.resolve(__dirname, 'js/application.js')
    ];

    new compressor.minify({
        type: 'uglifyjs',
        fileIn: files,
        fileOut: minPath,
        callback: function(err, min) {
            if (err) {
                return cb(err);
            }

            var metro = fs.readFileSync(minPath, { encoding: 'utf8' });
            cb(null, metro, json, dateIndex);
        }
    });
}

function minifyCss(metro, json, dateIndex, cb) {
    var minPath = '/tmp/styles.min.css';
    var files = [
        path.resolve(__dirname, 'css/normalize.css'),
        path.resolve(__dirname, 'css/skeleton.css'),
        path.resolve(__dirname, 'css/metro.css'),
        path.resolve(__dirname, 'css/styles.css')
    ]

    new compressor.minify({
        type: 'clean-css',
        fileIn: files,
        fileOut: minPath,
        callback: function(err, min) {
            if (err) {
                return cb(err);
            }

            var css = fs.readFileSync(minPath, { encoding: 'utf8' });
            cb(null, css, metro, json, dateIndex);
        }
    });
}

function writeFile(css, metro, json, dateIndex, cb) {
    var startDate = json[0].date;
    var raw = fs.readFileSync('README.md', { encoding: 'utf8' });
    var readme = marked(raw);
    var jquery = fs.readFileSync(path.resolve(__dirname, 'js/jquery-2.1.4.min.js'), { encoding: 'utf8' });

    var options = { readme: readme,
                    content: json,
                    dateIndex: dateIndex,
                    startDate: startDate,
                    includeDates: Object.keys(dateIndex),
                    styles: css,
                    jquery: jquery,
                    metro: metro };
    var html = indexTemplate(options);
    fs.writeFileSync('index.html', html, { encoding: 'utf8' });
}

async.waterfall([
    findFiles,
    createEntries,
    sortEntries,
    createJson,
    minifyMetro,
    minifyCss,
    writeFile
], function(err, results) {
    if (err) {
        console.log(err);
    }
});
