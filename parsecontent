#!/usr/bin/env node

// grab list of markdown files that match pattern dd-d{1,2}-dddd( second)?.md
// create data struct date -> entry
// create jade template that includes skeleton css
// compile each entry against template
// create index linking
// figure out spring break folder

var _ = require('lodash'),
    fs = require('fs'),
    path = require('path'),
    glob = require('glob'),
    moment = require('moment'),
    jade = require('jade'),
    marked = require('marked'),
    CleanCSS = require('clean-css');

var cleancss = new CleanCSS();

function Entry(path) {
    this.path = path;
    this.filename = _.last(this.path.split('/'));
    this.second = !!(/second\.md$/.exec(this.filename));
    var match = /^\d{1,2}-\d{1,2}-\d{4}/.exec(this.filename);
    if (match) {
        this.date = moment(new Date(match[0]));
    }
}

var entries = [];
var indexTemplate = jade.compileFile(path.resolve(__dirname, 'templates/index.jade'));
var entryTemplate = jade.compileFile(path.resolve(__dirname, 'templates/entry.jade'));
var htmlDir = 'html';
if (!fs.existsSync(htmlDir)) {
    fs.mkdir(htmlDir)
}

var styles = fs.readFileSync(path.resolve(__dirname, 'css/normalize.css'), { encoding: 'utf8' });
styles = styles + fs.readFileSync(path.resolve(__dirname, 'css/skeleton.css'), { encoding: 'utf8' });
styles = styles + fs.readFileSync(path.resolve(__dirname, 'css/styles.css'), { encoding: 'utf8' });

var jquery = fs.readFileSync(path.resolve(__dirname, 'js/jquery-2.1.4.min.js'), { encoding: 'utf8' });

glob("**/*.md", function (err, files) {
    console.log('Processing ' + files.length + ' files');

    _.each(files, function(file) {
        var entry = new Entry(file);
        if (!entry || !entry.date) {
            return;
        }

        entries.push(entry);
    });

    entries.sort(function(a, b) {
        if (a.date.valueOf() < b.date.valueOf()) {
            return -1;
        }

        if (b.date.valueOf() < a.date.valueOf()) {
            return 1;
        }

        if (a.second) {
            return 1;
        }

        return -1;
    });

    var json = [];
    _.each(entries, function(entry, idx) {
        var raw = fs.readFileSync(entry.path, { encoding: 'utf8' });
        if (!raw || raw.length === 0)
            return;

        var content = marked(raw);
        var title = entry.date.format('MMMM Do, YYYY');
        var date = title;
        var options = { content: content, date: date };
        var html = entryTemplate(options);
        json.push({ html: html, date: date });

        return;

        var options = { content: content, title: title, date: date, styles: styles };
        if (idx > 0) {
            var previous = entries[idx-1].filename.replace(/md$/, 'html');
            // console.log(previous)
            options.previous = previous;
        }

        if (idx < entries.length-1) {
            var next = entries[idx+1].filename.replace(/md$/, 'html');
            options.next = next;
        }

        var html = fn(options);
        var path = htmlDir + '/' + entry.filename.replace(/md$/, 'html');
        fs.writeFileSync(path, html, { encoding: 'utf8' });
    });

    var raw = fs.readFileSync('README.md', { encoding: 'utf8' });
    var readme = marked(raw);
    var options = { readme: readme, content: json, styles: cleancss.minify(styles).styles, jquery: jquery };
    var html = indexTemplate(options);
    fs.writeFileSync('index.html', html, { encoding: 'utf8' });
});
